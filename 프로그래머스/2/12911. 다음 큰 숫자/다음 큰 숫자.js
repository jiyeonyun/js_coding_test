function solution(n) {
    let c = n;
    let c0 = 0, c1 = 0;

    // step 1: 0의 개수 찾기 (맨 끝에서부터 연속된 0들)
    while ((c & 1) === 0 && c !== 0) {
        c0++;
        c >>= 1;
    }

    // step 2: 그 뒤에 나오는 1의 개수 찾기
    while ((c & 1) === 1) {
        c1++;
        c >>= 1;
    }

    // 예외 처리: 111...000 같은 케이스면 다음 큰 수 없음
    if (c0 + c1 === 31 || c0 + c1 === 0) {
        return -1;
    }

    // step 3: 다음 큰 수 만들기
    const p = c0 + c1;
    n |= (1 << p);           // p 위치에 1 추가
    n &= ~((1 << p) - 1);    // 그 오른쪽을 0으로 초기화
    n |= (1 << (c1 - 1)) - 1; // 오른쪽에 1의 개수만큼 1 배치

    return n;
}
